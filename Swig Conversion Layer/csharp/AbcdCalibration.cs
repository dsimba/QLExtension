//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QLEX {

public class AbcdCalibration : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AbcdCalibration(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AbcdCalibration obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AbcdCalibration() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_AbcdCalibration(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed, bool bIsFixed, bool cIsFixed, bool dIsFixed, bool vegaWeighted, SWIGTYPE_p_boost__shared_ptrT_EndCriteria_t endCriteria, SWIGTYPE_p_boost__shared_ptrT_OptimizationMethod_t method) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_0(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed, bIsFixed, cIsFixed, dIsFixed, vegaWeighted, SWIGTYPE_p_boost__shared_ptrT_EndCriteria_t.getCPtr(endCriteria), SWIGTYPE_p_boost__shared_ptrT_OptimizationMethod_t.getCPtr(method)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed, bool bIsFixed, bool cIsFixed, bool dIsFixed, bool vegaWeighted, SWIGTYPE_p_boost__shared_ptrT_EndCriteria_t endCriteria) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_1(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed, bIsFixed, cIsFixed, dIsFixed, vegaWeighted, SWIGTYPE_p_boost__shared_ptrT_EndCriteria_t.getCPtr(endCriteria)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed, bool bIsFixed, bool cIsFixed, bool dIsFixed, bool vegaWeighted) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_2(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed, bIsFixed, cIsFixed, dIsFixed, vegaWeighted), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed, bool bIsFixed, bool cIsFixed, bool dIsFixed) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_3(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed, bIsFixed, cIsFixed, dIsFixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed, bool bIsFixed, bool cIsFixed) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_4(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed, bIsFixed, cIsFixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed, bool bIsFixed) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_5(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed, bIsFixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess, bool aIsFixed) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_6(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess, aIsFixed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess, double dGuess) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_7(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess, dGuess), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess, double cGuess) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_8(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess, cGuess), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess, double bGuess) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_9(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess, bGuess), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols, double aGuess) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_10(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols), aGuess), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public AbcdCalibration(DoubleVector t, DoubleVector blackVols) : this(NQuantLibcPINVOKE.new_AbcdCalibration__SWIG_11(DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public DoubleVector k(DoubleVector t, DoubleVector blackVols) {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.AbcdCalibration_k(swigCPtr, DoubleVector.getCPtr(t), DoubleVector.getCPtr(blackVols)), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void compute() {
    NQuantLibcPINVOKE.AbcdCalibration_compute(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double a() {
    double ret = NQuantLibcPINVOKE.AbcdCalibration_a(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double b() {
    double ret = NQuantLibcPINVOKE.AbcdCalibration_b(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double c() {
    double ret = NQuantLibcPINVOKE.AbcdCalibration_c(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double d() {
    double ret = NQuantLibcPINVOKE.AbcdCalibration_d(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double value(double x) {
    double ret = NQuantLibcPINVOKE.AbcdCalibration_value(swigCPtr, x);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
