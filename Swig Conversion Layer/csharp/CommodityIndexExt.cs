//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QLEX {

public class CommodityIndexExt : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CommodityIndexExt(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CommodityIndexExt obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CommodityIndexExt() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_CommodityIndexExt(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_CommodityIndexExt __deref__() {
    global::System.IntPtr cPtr = NQuantLibcPINVOKE.CommodityIndexExt___deref__(swigCPtr);
    SWIGTYPE_p_CommodityIndexExt ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_CommodityIndexExt(cPtr, false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isNull() {
    bool ret = NQuantLibcPINVOKE.CommodityIndexExt_isNull(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CommodityIndexExt(string name, CommodityCurveExt forwardCurve, Calendar calendar) : this(NQuantLibcPINVOKE.new_CommodityIndexExt__SWIG_0(name, CommodityCurveExt.getCPtr(forwardCurve), Calendar.getCPtr(calendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CommodityIndexExt(string name, Calendar calendar) : this(NQuantLibcPINVOKE.new_CommodityIndexExt__SWIG_1(name, Calendar.getCPtr(calendar)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Observable asObservable() {
    Observable ret = new Observable(NQuantLibcPINVOKE.CommodityIndexExt_asObservable(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string name() {
    string ret = NQuantLibcPINVOKE.CommodityIndexExt_name(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void update() {
    NQuantLibcPINVOKE.CommodityIndexExt_update(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Calendar calendar() {
    Calendar ret = new Calendar(NQuantLibcPINVOKE.CommodityIndexExt_calendar(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double price(Date date) {
    double ret = NQuantLibcPINVOKE.CommodityIndexExt_price(swigCPtr, Date.getCPtr(date));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double forwardPrice(Date date) {
    double ret = NQuantLibcPINVOKE.CommodityIndexExt_forwardPrice(swigCPtr, Date.getCPtr(date));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Date lastQuoteDate() {
    Date ret = new Date(NQuantLibcPINVOKE.CommodityIndexExt_lastQuoteDate(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addQuote(Date quoteDate, double quote) {
    NQuantLibcPINVOKE.CommodityIndexExt_addQuote(swigCPtr, Date.getCPtr(quoteDate), quote);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearQuotes() {
    NQuantLibcPINVOKE.CommodityIndexExt_clearQuotes(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValidQuoteDate(Date quoteDate) {
    bool ret = NQuantLibcPINVOKE.CommodityIndexExt_isValidQuoteDate(swigCPtr, Date.getCPtr(quoteDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RealTimeSeries quotes() {
    RealTimeSeries ret = new RealTimeSeries(NQuantLibcPINVOKE.CommodityIndexExt_quotes(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setForwardCurve(CommodityCurveExt forwardCurve) {
    NQuantLibcPINVOKE.CommodityIndexExt_setForwardCurve(swigCPtr, CommodityCurveExt.getCPtr(forwardCurve));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
