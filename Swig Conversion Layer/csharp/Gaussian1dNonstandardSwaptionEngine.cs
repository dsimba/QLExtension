//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QLEX {

public class Gaussian1dNonstandardSwaptionEngine : PricingEngine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Gaussian1dNonstandardSwaptionEngine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.Gaussian1dNonstandardSwaptionEngine_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Gaussian1dNonstandardSwaptionEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Gaussian1dNonstandardSwaptionEngine() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_Gaussian1dNonstandardSwaptionEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model, int integrationPoints, double stddevs, bool extrapolatePayoff, bool flatPayoffExtrapolation, QuoteHandle oas, YieldTermStructureHandle discountCurve) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_0(Gaussian1dModel.getCPtr(model), integrationPoints, stddevs, extrapolatePayoff, flatPayoffExtrapolation, QuoteHandle.getCPtr(oas), YieldTermStructureHandle.getCPtr(discountCurve)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model, int integrationPoints, double stddevs, bool extrapolatePayoff, bool flatPayoffExtrapolation, QuoteHandle oas) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_1(Gaussian1dModel.getCPtr(model), integrationPoints, stddevs, extrapolatePayoff, flatPayoffExtrapolation, QuoteHandle.getCPtr(oas)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model, int integrationPoints, double stddevs, bool extrapolatePayoff, bool flatPayoffExtrapolation) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_2(Gaussian1dModel.getCPtr(model), integrationPoints, stddevs, extrapolatePayoff, flatPayoffExtrapolation), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model, int integrationPoints, double stddevs, bool extrapolatePayoff) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_3(Gaussian1dModel.getCPtr(model), integrationPoints, stddevs, extrapolatePayoff), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model, int integrationPoints, double stddevs) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_4(Gaussian1dModel.getCPtr(model), integrationPoints, stddevs), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model, int integrationPoints) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_5(Gaussian1dModel.getCPtr(model), integrationPoints), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gaussian1dNonstandardSwaptionEngine(Gaussian1dModel model) : this(NQuantLibcPINVOKE.new_Gaussian1dNonstandardSwaptionEngine__SWIG_6(Gaussian1dModel.getCPtr(model)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
