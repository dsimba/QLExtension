//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QLEX {

public class GenericSwap : Swap {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GenericSwap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.GenericSwap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GenericSwap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GenericSwap() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_GenericSwap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, double firstLegRate, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount, double secondLegSpread, bool arithmeticAveragedCoupon) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_0((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), firstLegRate, DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount), secondLegSpread, arithmeticAveragedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, double firstLegRate, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount, double secondLegSpread) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_1((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), firstLegRate, DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount), secondLegSpread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, double firstLegRate, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_2((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), firstLegRate, DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, IborIndex firstLegIndex, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount, double firstLegSpread, double secondLegSpread, bool arithmeticAveragedCoupon) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_3((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), IborIndex.getCPtr(firstLegIndex), DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount), firstLegSpread, secondLegSpread, arithmeticAveragedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, IborIndex firstLegIndex, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount, double firstLegSpread, double secondLegSpread) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_4((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), IborIndex.getCPtr(firstLegIndex), DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount), firstLegSpread, secondLegSpread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, IborIndex firstLegIndex, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount, double firstLegSpread) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_5((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), IborIndex.getCPtr(firstLegIndex), DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount), firstLegSpread), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GenericSwap(_GenericSwap.Type type, DoubleVector firstLegNominals, Schedule firstLegResetSchedule, Schedule firstLegPaymentSchedule, IborIndex firstLegIndex, DayCounter firstLegDayCount, DoubleVector secondLegNominals, Schedule secondLegResetSchedule, Schedule secondLegPaymentSchedule, IborIndex secondLegIndex, DayCounter secondLegDayCount) : this(NQuantLibcPINVOKE.new_GenericSwap__SWIG_6((int)type, DoubleVector.getCPtr(firstLegNominals), Schedule.getCPtr(firstLegResetSchedule), Schedule.getCPtr(firstLegPaymentSchedule), IborIndex.getCPtr(firstLegIndex), DayCounter.getCPtr(firstLegDayCount), DoubleVector.getCPtr(secondLegNominals), Schedule.getCPtr(secondLegResetSchedule), Schedule.getCPtr(secondLegPaymentSchedule), IborIndex.getCPtr(secondLegIndex), DayCounter.getCPtr(secondLegDayCount)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public _GenericSwap.Type type() {
    _GenericSwap.Type ret = (_GenericSwap.Type)NQuantLibcPINVOKE.GenericSwap_type(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double fairRate() {
    double ret = NQuantLibcPINVOKE.GenericSwap_fairRate(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double fairSpread() {
    double ret = NQuantLibcPINVOKE.GenericSwap_fairSpread(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double firstLegBPS() {
    double ret = NQuantLibcPINVOKE.GenericSwap_firstLegBPS(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double firstLegNPV() {
    double ret = NQuantLibcPINVOKE.GenericSwap_firstLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double secondLegBPS() {
    double ret = NQuantLibcPINVOKE.GenericSwap_secondLegBPS(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double secondLegNPV() {
    double ret = NQuantLibcPINVOKE.GenericSwap_secondLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StrVector firstLegInfo() {
    StrVector ret = new StrVector(NQuantLibcPINVOKE.GenericSwap_firstLegInfo(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StrVector secondLegInfo() {
    StrVector ret = new StrVector(NQuantLibcPINVOKE.GenericSwap_secondLegInfo(swigCPtr), false);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly _GenericSwap.Type Receiver = (_GenericSwap.Type)NQuantLibcPINVOKE.GenericSwap_Receiver_get();
  public static readonly _GenericSwap.Type Payer = (_GenericSwap.Type)NQuantLibcPINVOKE.GenericSwap_Payer_get();
}

}
