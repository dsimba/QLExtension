//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QLEX {

public class GsrProcess : StochasticProcess1D {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GsrProcess(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.GsrProcess_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GsrProcess obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GsrProcess() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_GsrProcess(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public GsrProcess(QlArray times, QlArray vols, QlArray reversions, double T) : this(NQuantLibcPINVOKE.new_GsrProcess__SWIG_0(QlArray.getCPtr(times), QlArray.getCPtr(vols), QlArray.getCPtr(reversions), T), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public GsrProcess(QlArray times, QlArray vols, QlArray reversions) : this(NQuantLibcPINVOKE.new_GsrProcess__SWIG_1(QlArray.getCPtr(times), QlArray.getCPtr(vols), QlArray.getCPtr(reversions)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double sigma(double t) {
    double ret = NQuantLibcPINVOKE.GsrProcess_sigma(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double reversion(double t) {
    double ret = NQuantLibcPINVOKE.GsrProcess_reversion(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double y(double t) {
    double ret = NQuantLibcPINVOKE.GsrProcess_y(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double G(double t, double T, double x) {
    double ret = NQuantLibcPINVOKE.GsrProcess_G(swigCPtr, t, T, x);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setForwardMeasureTime(double t) {
    NQuantLibcPINVOKE.GsrProcess_setForwardMeasureTime(swigCPtr, t);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
