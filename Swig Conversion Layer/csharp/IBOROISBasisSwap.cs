//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QLEX {

public class IBOROISBasisSwap : Swap {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal IBOROISBasisSwap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.IBOROISBasisSwap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IBOROISBasisSwap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IBOROISBasisSwap() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_IBOROISBasisSwap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public IBOROISBasisSwap(_IBOROISBasisSwap.Type type, double nominal, Schedule floatingSchedule, IborIndex iborIndex, DayCounter floatingDC, Schedule fixedSchedule, OvernightIndex overnightIndex, double spread, DayCounter fixedDC, BusinessDayConvention paymentConvention, bool arithmeticAveragedCoupon) : this(NQuantLibcPINVOKE.new_IBOROISBasisSwap__SWIG_0((int)type, nominal, Schedule.getCPtr(floatingSchedule), IborIndex.getCPtr(iborIndex), DayCounter.getCPtr(floatingDC), Schedule.getCPtr(fixedSchedule), OvernightIndex.getCPtr(overnightIndex), spread, DayCounter.getCPtr(fixedDC), (int)paymentConvention, arithmeticAveragedCoupon), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IBOROISBasisSwap(_IBOROISBasisSwap.Type type, double nominal, Schedule floatingSchedule, IborIndex iborIndex, DayCounter floatingDC, Schedule fixedSchedule, OvernightIndex overnightIndex, double spread, DayCounter fixedDC, BusinessDayConvention paymentConvention) : this(NQuantLibcPINVOKE.new_IBOROISBasisSwap__SWIG_1((int)type, nominal, Schedule.getCPtr(floatingSchedule), IborIndex.getCPtr(iborIndex), DayCounter.getCPtr(floatingDC), Schedule.getCPtr(fixedSchedule), OvernightIndex.getCPtr(overnightIndex), spread, DayCounter.getCPtr(fixedDC), (int)paymentConvention), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public IBOROISBasisSwap(_IBOROISBasisSwap.Type type, double nominal, Schedule floatingSchedule, IborIndex iborIndex, DayCounter floatingDC, Schedule fixedSchedule, OvernightIndex overnightIndex, double spread, DayCounter fixedDC) : this(NQuantLibcPINVOKE.new_IBOROISBasisSwap__SWIG_2((int)type, nominal, Schedule.getCPtr(floatingSchedule), IborIndex.getCPtr(iborIndex), DayCounter.getCPtr(floatingDC), Schedule.getCPtr(fixedSchedule), OvernightIndex.getCPtr(overnightIndex), spread, DayCounter.getCPtr(fixedDC)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double fairSpread() {
    double ret = NQuantLibcPINVOKE.IBOROISBasisSwap_fairSpread(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double floatingLegBPS() {
    double ret = NQuantLibcPINVOKE.IBOROISBasisSwap_floatingLegBPS(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double floatingLegNPV() {
    double ret = NQuantLibcPINVOKE.IBOROISBasisSwap_floatingLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double overnightLegBPS() {
    double ret = NQuantLibcPINVOKE.IBOROISBasisSwap_overnightLegBPS(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double overnightLegNPV() {
    double ret = NQuantLibcPINVOKE.IBOROISBasisSwap_overnightLegNPV(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly _IBOROISBasisSwap.Type Receiver = (_IBOROISBasisSwap.Type)NQuantLibcPINVOKE.IBOROISBasisSwap_Receiver_get();
  public static readonly _IBOROISBasisSwap.Type Payer = (_IBOROISBasisSwap.Type)NQuantLibcPINVOKE.IBOROISBasisSwap_Payer_get();
}

}
